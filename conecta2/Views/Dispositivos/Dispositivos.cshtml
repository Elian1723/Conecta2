@model conecta2.Controllers.DispositivosController.EstadoTierra
@{
    Layout = "_Layout";
    ViewData["Title"] = "Mis Iconos";
}
<div class="container mt-5 shadow-sm p-3 rounded">
    <h2 class="text-center mb-4">Mis Dispositivos</h2>

    <!-- Contenedor para el Dispositivo 1 -->
    <div class="mb-4">
        <h5 class="text-center">Dispositivo 1</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi1" onclick="toggleFoco(1, false)">
                <div class="card-body">
                    <i class="bi bi-plug" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Apagar</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi1On" onclick="toggleFoco(1, true)">
                <div class="card-body">
                    <i class="bi bi-plug-fill" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Encender</h5>
                </div>
            </div>
        </div>
        <div id="estado1" class="text-center">Estado: Apagado</div>
    </div>

    <!-- Contenedor para el Dispositivo 2 -->
    <div class="mb-4">
        <h5 class="text-center">Dispositivo 2</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="card text-center border-danger me-2" style="cursor: pointer; width: 150px;" id="btnApi2" onclick="toggleFoco(2, false)">
                <div class="card-body">
                    <i class="bi bi-plug" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Apagar</h5>
                </div>
            </div>
            <div class="card text-center" style="cursor: pointer; width: 150px;" id="btnApi2On" onclick="toggleFoco(2, true)">
                <div class="card-body">
                    <i class="bi bi-plug-fill" style="font-size: 3rem;"></i>
                    <h5 class="card-title mt-3">Encender</h5>
                </div>
            </div>
        </div>
        <div id="estado2" class="text-center">Estado: Apagado</div>
    </div>

    <!-- Contenedor para el Dispositivo 3 -->
    <div class="mb-4">
        <h5 class="text-center">Dispositivo 3</h5>
        <div class="d-flex justify-content-center mb-3">
            <div class="row">
                <!-- Este div contendrá el estado dinámico del dispositivo -->
                <div id="estadoTierra">
                    <div class="col-md-12">
                        <div class="card text-white bg-success mb-3">
                            <div class="card-header">
                                <i class="fas fa-tint"></i> Tierra Húmeda
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Húmedo</h5>
                                <p class="card-text">La tierra está en buen estado, el nivel de humedad es óptimo.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container mt-5">
        <!-- Botones para cambiar el estado -->
        <div class="row mb-3">
            <div class="col-md-12 text-center">
                <button class="btn btn-success" onclick="cambiarEstado('Humeda')">Tierra Húmeda</button>
                <button class="btn btn-warning" onclick="cambiarEstado('Seca')">Tierra Seca</button>
                <button class="btn btn-danger" onclick="cambiarEstado('FueraDeLaTierra')">Fuera de la Tierra</button>
            </div>
        </div>
    </div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    function cambiarEstado(estado) {
        $.ajax({
            url: '@Url.Action("ObtenerEstado", "Dispositivos")',
            type: 'POST',
            data: { estado: estado },
            success: function (result) {
                // Cambiar el estado dinámicamente según el valor devuelto por el controlador
                actualizarEstadoTierra(result.estado);
            },
            error: function (xhr, status, error) {
                console.error("Error: " + error);
            }
        });
    }

    function actualizarEstadoTierra(estado) {
        let estadoHtml = '';

        if (estado === 'Humeda') {
            estadoHtml = `
                    <div class="col-md-12">
                        <div class="card text-white bg-success mb-3">
                            <div class="card-header">
                                <i class="fas fa-tint"></i> Tierra Húmeda
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Húmedo</h5>
                                <p class="card-text">La tierra está en buen estado, el nivel de humedad es óptimo.</p>
                            </div>
                        </div>
                    </div>`;
        } else if (estado === 'Seca') {
            estadoHtml = `
                    <div class="col-md-12">
                        <div class="card text-white bg-warning mb-3">
                            <div class="card-header">
                                <i class="fas fa-sun"></i> Tierra Seca
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Seca</h5>
                                <p class="card-text">La tierra necesita riego, el nivel de humedad es bajo.</p>
                            </div>
                        </div>
                    </div>`;
        } else if (estado === 'FueraDeLaTierra') {
            estadoHtml = `
                    <div class="col-md-12">
                        <div class="card text-white bg-danger mb-3">
                            <div class="card-header">
                                <i class="fas fa-exclamation-triangle"></i> Fuera de la Tierra
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Estado: Crítico</h5>
                                <p class="card-text">El sensor está fuera de la tierra o hay un error en el sistema.</p>
                            </div>
                        </div>
                    </div>`;
        }

        // Actualizar el contenido del div con el nuevo estado
        $('#estadoTierra').html(estadoHtml);
    }
</script>

<script>
    async function toggleFoco(idDispositivo, encender) {
        try {
            const response = await fetch(`/Dispositivos/ToggleFoco?idDispositivo=${idDispositivo}&encender=${encender}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(encender)
            });

            if (!response.ok) {
                throw new Error('Error al cambiar el estado del foco: ' + response.statusText);
            }

            const result = await response.json();
            console.log(result.message);

            // Actualizar el estado visual del dispositivo
            updateDeviceState(idDispositivo, encender);
        } catch (error) {
            console.error(error);
        }
    }

    function updateDeviceState(idDispositivo, encender) {
        const cardApagar = document.getElementById(`btnApi${idDispositivo}`);
        const cardEncender = document.getElementById(`btnApi${idDispositivo}On`);
        const estadoDiv = document.getElementById(`estado${idDispositivo}`);

        if (!cardApagar || !cardEncender || !estadoDiv) {
            console.error(`Elementos no encontrados para el ID: ${idDispositivo}`);
            return; // Salir si no se encuentran los elementos
        }

        if (encender) {
            cardApagar.classList.remove("border-danger");
            cardEncender.classList.add("border-danger");
            estadoDiv.textContent = "Estado: Encendido";  // Actualiza el texto del estado
        } else {
            cardApagar.classList.add("border-danger");
            cardEncender.classList.remove("border-danger");
            estadoDiv.textContent = "Estado: Apagado";  // Actualiza el texto del estado
        }
    }

</script>

@* 
<script>
    // Función para hacer la solicitud y cambiar el estado del foco
    async function toggleFoco(idDispositivo, encender) {
        try {
            const response = await fetch(`/Dispositivos/ToggleFoco?idDispositivo=${idDispositivo}&encender=${encender}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(encender)
            });

            if (!response.ok) {
                throw new Error('Error al cambiar el estado del foco: ' + response.statusText);
            }

            const result = await response.json();
            console.log(result.message);
        } catch (error) {
            console.error(error);
        }
    }

    // Asignar los eventos a los botones
    document.getElementById("btnApi1").addEventListener("click", function () {
        toggleFoco(1, true);  // Llamada para apagar el foco (asumiendo idDispositivo = 1)
    });

    document.getElementById("btnApi2").addEventListener("click", function () {
        toggleFoco(1, false);  // Llamada para encender el foco (asumiendo idDispositivo = 1)
    });
</script> *@



@* <script type="text/javascript">
    $(document).ready(function () {

        // Evento del botón para consumir API 1
        $('#btnApi1').click(function () {
            $.ajax({
                url: '@Url.Action("ToggleFoco", "Dispositivos")',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert("Error al intentar consumir API 1.");
                }
            });
        });

        // Evento del botón para consumir API 2
        $('#btnApi2').click(function () {
            $.ajax({
                url: '@Url.Action("ToggleFoco", "Dispositivos")',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert("Error al intentar consumir API 2.");
                }
            });
        });

    });
</script> *@

@* <script>
    function toggleFoco(circuito, encender) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("ToggleFoco", "Dispositivos")',
            data: { circuito: circuito, encender: encender },
            success: function (response) {
                alert(response.message); // Muestra el mensaje del servidor
                changeBorder(circuito, encender); // Cambia el borde según el estado
            }
        });
    }

    function changeBorder(circuito, encender) {
        const cards = document.querySelectorAll('.card');
        cards.forEach((c, index) => {
            if (index === (circuito - 1) * 2 || index === (circuito - 1) * 2 + 1) {
                c.classList.remove('border-success', 'shadow-success', 'border-danger', 'shadow-danger');
                if (encender) {
                    c.classList.add('border-success', 'shadow-success'); // Encendido
                } else {
                    c.classList.add('border-danger', 'shadow-danger');   // Apagado
                }
            }
        });
    }
</script> *@

<style>
    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Asegura que el contenedor ocupe el 100% de la altura */
    }

    .content {
        flex: 1; /* Este contendrá el contenido principal y se expandirá */
    }

    .card {
        transition: border-color 0.3s, box-shadow 0.3s;
    }

    .border-danger {
        border-color: red !important;
    }

    .shadow-danger {
        box-shadow: 0 0 10px rgba(255, 0, 0, 0.5) !important;
    }

    .border-success {
        border-color: green !important;
    }

    .shadow-success {
        box-shadow: 0 0 10px rgba(0, 128, 0, 0.5) !important;
    }
</style>
